name: GH Actions CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  # Specific group naming so CI is only cancelled
  # within same PR or on merge to main
  group: {{ '${{ github.ref }}-${{ github.head_ref }}-${{ github.workflow }}' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -l {0}

jobs:
  main_tests:
    if: "github.repository == '{{ cookiecutter.github_url }}'"
    runs-on: {{ '${{ matrix.os }}' }}
    strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-latest, ] #macOS-latest, ubuntu-latest, windows-latest]
          python-version: ["3.8"] #, "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3

    - name: Build information
      run: |
        uname -a
        df -h
        ulimit -a

{% if cookiecutter.dependency_source == 'Dependencies from pip only (no conda)' %}
    - name: Set up Python {{ '${{ matrix.python-version }}' }}
      uses: actions/setup-python@v4
      with:
        python-version: {{ '${{ matrix.python-version }}' }}

    - name: Install testing dependencies
      # need non-login bash shell for Mac outside conda
      # otherwise it sources system Python
      shell: bash
      run: |
        python -m pip install -U pytest pytest-xdist pytest-cov codecov
{% else %}
    # More info on options: https://github.com/conda-incubator/setup-miniconda
    - name: Install conda dependencies
      shell: bash -l {0}
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        python-version: {{ '${{ matrix.python-version }}' }}
        environment-file: devtools/conda-envs/test_env.yaml
        # add-pip-as-python-dependency: true
        # architecture: x64
{% if cookiecutter.dependency_source == 'Prefer conda-forge over the default anaconda channel with pip fallback' %}
        # mamba-version: "*"
        channels: conda-forge, defaults
{% elif cookiecutter.dependency_source == 'Prefer default anaconda channel with pip fallback' %}
        channels: defaults
{% endif %}
        activate-environment: {{cookiecutter.repo_name}}-test
        # auto-update-conda: true
        auto-activate-base: false
        show-channel-urls: true
{% endif %}

{% if cookiecutter.dependency_source == 'Dependencies from pip only (no conda)' %}
    - name: Install package
      shell: bash
      run: |
        python --version
        python -m pip install .
{% else %}
    - name: Install package
      run: |
        python -m pip install . --no-deps
{% endif %}

    - name: Python information
{% if cookiecutter.dependency_source == 'Dependencies from pip only (no conda)' %}
      shell: bash
{% endif %}
      run: |
        which python
        which pip
        pip list
{% if cookiecutter.dependency_source != 'Dependencies from pip only (no conda)' %}
        conda info
        conda list
{% endif %}
    - name: Run tests
{% if cookiecutter.dependency_source == 'Dependencies from pip only (no conda)' %}
      shell: bash
{% endif %}
      run: |
        pytest -n 4 -v --cov={{ cookiecutter.repo_name }} --cov-report=xml --color=yes {{ cookiecutter.repo_name }}/tests/

    - name: codecov
      uses: codecov/codecov-action@v2
      with:
        file: coverage.xml
        name: codecov-{{ '${{ matrix.os }}' }}-py{{ '${{ matrix.python-version }}' }}
        verbose: True


  pylint_check:
    if: "github.repository == '{{ cookiecutter.github_url }}'"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install Pylint
      run: |
        which pip
        which python
        pip install pylint

    - name: Run Pylint
      env:
        PYLINTRC: .pylintrc
      run: |
        pylint {{ cookiecutter.repo_name }}


  pypi_check:
    if: "github.repository == '{{ cookiecutter.github_url }}'"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        pip install setuptools cython numpy twine

    - name: Build package
      run: |
        python setup.py sdist

    - name: Check package build
      run: |
        DISTRIBUTION=$(ls -t1 dist/{{ cookiecutter.package_name }}-*.tar.gz | head -n 1)
        test -n "${DISTRIBUTION}" || { echo "no distribution dist/{{ cookiecutter.package_name }}-*.tar.gz found"; exit 1; }
        echo "twine check $DISTRIBUTION"
        twine check $DISTRIBUTION
  
#   install_from_source_pip:
#     if: "github.repository == '{{ cookiecutter.github_url }}'"
#     runs-on: ubuntu-latest
#     strategy:
#         fail-fast: false
#         matrix:
#           python-version: ["3.8", "3.9", "3.10"]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Python {{ '${{ matrix.python-version }}' }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: {{ '${{ matrix.python-version }}' }}

#     - name: Build from source
#       run: |
#         python --version
#         pip install -e ".[test,doc]"

#     - name: Check success
#       run: |
#         python -c "import MDAnalysis as mda; print(f'MDAnalysis version:', mda.__version__)"
#         python -c "import {{cookiecutter.package_name}}; print('{{cookiecutter.package_name}} version:', {{cookiecutter.package_name}}.__version__)"

# {% if cookiecutter.dependency_source != 'Dependencies from pip only (no conda)' %}
#   install_from_source_conda:
#     if: "github.repository == '{{ cookiecutter.github_url }}'"
#     runs-on: ubuntu-latest
#     strategy:
#         fail-fast: false
#         matrix:
#           python-version: ["3.8", "3.9", "3.10"]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Install conda
#       uses: conda-incubator/setup-miniconda@v2
#       with:
#         python-version: {{ '${{ matrix.python-version }}' }}
#         add-pip-as-python-dependency: true
#         architecture: x64
#         auto-update-conda: true
#         show-channel-urls: true
# {% if cookiecutter.dependency_source == 'Prefer conda-forge over the default anaconda channel with pip fallback' %}
#         mamba-version: "*"
#         channels: conda-forge, defaults
# {% else %}
#         channels: defaults
# {% endif %}
#     - name: Build from source
#       run: |
#         conda create --name {{cookiecutter.repo_name}}
#         conda activate {{cookiecutter.repo_name}}
#         conda env update --name {{cookiecutter.repo_name}} --file devtools/conda-envs/test_env.yaml
#         conda list
#         ls docs/
#         cat docs/requirements.yaml
#         conda env update --name {{cookiecutter.repo_name}} --file docs/requirements.yaml
#         pip install -e .
#         conda list

#     - name: Check success
#       run: |
#         conda activate {{cookiecutter.repo_name}}
#         python -c "import MDAnalysis as mda; print(f'MDAnalysis version:', mda.__version__)"
#         python -c "import {{cookiecutter.package_name}}; print('{{cookiecutter.package_name}} version:', {{cookiecutter.package_name}}.__version__)"


# {% endif %}
